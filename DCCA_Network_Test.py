import torch
from torch.utils.data import DataLoader
import torch.nn as nn
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn 
#%%
from sklearn.datasets import load_iris
from sklearn.cross_decomposition import CCA
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from DCCA_Network import DccaNet
import pandas as pd
import random
from random import randint


#%%
def train_dcca(view_1_data, view_2_data, hidden_dims, output_dim, epochs, batch_size, lr):
    input_dim_1 = view_1_data.shape[1]
    input_dim_2 = view_2_data.shape[1]
    
    # Pad the smaller view with zeros
    max_num_samples = max(view_1_data.size(0), view_2_data.size(0))
    if view_1_data.size(0) < max_num_samples:
        padding = max_num_samples - view_1_data.size(0)
        view_1_data = torch.cat([view_1_data, torch.zeros(padding, view_1_data.size(1))], dim=0)
    elif view_2_data.size(0) < max_num_samples:
        padding = max_num_samples - view_2_data.size(0)
        view_2_data = torch.cat([view_2_data, torch.zeros(padding, view_2_data.size(1))], dim=0)
    
    model = DccaNet(input_dim_1, input_dim_2, hidden_dims, output_dim)
    criterion = nn.CosineSimilarity(dim=1)
    optimizer = torch.optim.Adam(model.parameters(), lr=lr)
    
    for epoch in range(epochs):
        for i in range(0, max_num_samples, batch_size):
            batch_x1 = view_1_data[i:i+batch_size]
            batch_x2 = view_2_data[i:i+batch_size]
            
            optimizer.zero_grad()
            
            x1, x2 = model(batch_x1, batch_x2)
            loss = -criterion(x1, x2).mean()
            
            loss.backward()
            optimizer.step()
        
        if (epoch+1) % 10 == 0:
            print(f"Epoch {epoch+1}/{epochs}, Loss: {loss.item():.4f}")
    
    return model

def test_dcca(model, view_1_data, view_2_data):
    model.eval()
    with torch.no_grad():
        x1, x2 = model(view_1_data, view_2_data)
        corr = torch.mean(torch.sum(x1 * x2, dim=1))
    return corr.item()

def pad_with_zeros(array1, array2):
    
    array1 = np.array(array1)
    array2 = np.array(array2)

    # Get the shapes of the arrays
    rows1, cols1 = array1.shape
    rows2, cols2 = array2.shape
    
    max_rows = max(rows1, rows2)
    max_cols = max(cols1, cols2)
    
    padded_array1 = np.zeros((max_rows, max_cols))
    padded_array2 = np.zeros((max_rows, max_cols))

    padded_array1[:rows1, :cols1] = array1
    padded_array2[:rows2, :cols2] = array2

    return padded_array1, padded_array2

#%% load the data

main_data_path = 'Dataset/dataFilt.csv'
pathways_data_path = 'Dataset/kegg_legacy_ensembl.csv'

my_data = pd.read_csv(main_data_path)
my_pathways_data = pd.read_csv(pathways_data_path)

dataFrame = pd.DataFrame(my_pathways_data)

#%%
#pathway_1_key
#pathway_2_key

pathway_1_key
pathway_2_key


#%%
view_1 = my_data[my_data['index'].isin(pathway_1_key)]
view_2 = my_data[my_data['index'].isin(pathway_2_key)]

view_1_data = view_1.drop(['index'], axis=1)
view_1_data = view_1_data.values
print(view_1_data.shape)
#%%

view_2_data = view_2.drop(['index'], axis=1)
view_2_data = view_2_data.values
print(view_2_data.shape)

rows1, cols1 = view_1_data.shape
rows2, cols2 = view_2_data.shape
    
#print(rows1)
#print(cols1)
max_samples = max(len(view_1_data), len(view_2_data))

#%%
# Pad the smaller view with zeros
padded_view_1, padded_view_2 = pad_with_zeros(view_1_data, view_2_data)


#%% Split the data into train and test sets
train_view_1, test_view_1 = padded_view_1[:82], padded_view_1[55:]
train_view_2, test_view_2 = padded_view_2[:82], padded_view_2[55:]

train_view_1 = torch.from_numpy(train_view_1).float()
train_view_2 = torch.from_numpy(train_view_2).float()
test_view_1 = torch.from_numpy(test_view_1).float()
test_view_2 = torch.from_numpy(test_view_2).float()
# Dummy data

#print(train_view_1.shape)
#print(train_view_2.shape)

#%%
hidden_dims = [32, 16]
output_dim = 8
epochs = 100
batch_size = 800
lr = 0.0005

model = train_dcca(train_view_1, train_view_2, hidden_dims, output_dim, epochs, batch_size, lr)

# Test the model
test_corr = test_dcca(model, test_view_1, test_view_2)
print(f"Test correlation: {test_corr:.4f}")

#%%